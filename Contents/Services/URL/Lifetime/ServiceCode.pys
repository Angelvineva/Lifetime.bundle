import re

NAMESPACES = {'smil': 'http://www.w3.org/2005/SMIL21/Language'}
ICON = 'icon-default.png'

####################################################################################################
def NormalizeURL(url):

    # Not sure if this is actually needed.
    return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

    html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
      
    title_plus = html.xpath('//meta[@property="og:title"]')[0].get('content')
    title_plus_splits = title_plus.split(' - ')
    title = title_plus_splits[0]
    show = title_plus_splits[1].split(' Full Episodes ')[0]
    summary = html.xpath('//meta[@property="og:description"]')[0].get('content')
    thumbs = html.xpath('//meta[@property="og:image"]')
    thumb = thumbs[len(thumbs) - 1].get('content')
    url = html.xpath('//meta[@property="og:url"]')[0].get('content')
    season = None
    season_match = re.search(r'/season-(\d+)/', url)
    if season_match:
        season = int(season_match.group(1))
    originally_available_at = None
    
    for script in html.xpath('//script[@type="text/javascript"]'):
        text = HTML.StringFromElement(script)
        date_match = re.search(r'"original_air_date":"([^"]+)"', text)
        if date_match:            
            try:
                air_date = date_match.group(1)
                originally_available_at = Datetime.ParseDate(air_date).date()
            except:
                originally_available_at = None
            break
          
    return EpisodeObject(
        show = show,
        season = season,        
        title = title,
        summary = summary,
        thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback=R(ICON)),
        originally_available_at = originally_available_at
    )

####################################################################################################
def MediaObjectsForURL(url):

    return [
        # Give lots of choices. However, these choices don't all exist for every video.
        MediaObject(
            parts = [
                PartObject(key=Callback(PlayVideo, url=url, video_resolution='540'))
            ],
            protocol = Protocol.RTMP,
            video_resolution = '540',
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        ),
        MediaObject(
            parts = [
                PartObject(key=Callback(PlayVideo, url=url, video_resolution='432'))
            ],
            protocol = Protocol.RTMP,
            video_resolution = '432',
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        ),        
        MediaObject(
            parts = [
                PartObject(key=Callback(PlayVideo, url=url, video_resolution='360'))
            ],
            protocol = Protocol.RTMP,
            video_resolution = '360',
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        ),
        MediaObject(
            parts = [
                PartObject(key=Callback(PlayVideo, url=url, video_resolution='288'))
            ],
            protocol = Protocol.RTMP,
            video_resolution = '288',
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        ),
        MediaObject(
            parts = [
                PartObject(key=Callback(PlayVideo, url=url, video_resolution='252'))
            ],
            protocol = Protocol.RTMP,
            video_resolution = '252',
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        ),
        MediaObject(
            parts = [
                PartObject(key=Callback(PlayVideo, url=url, video_resolution='180'))
            ],
            protocol = Protocol.RTMP,
            video_resolution = '180',
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url, video_resolution):

    html = HTML.ElementFromURL(url, cacheTime=CACHE_1HOUR)
    
    found_video = False
    
    for script in html.xpath('//script[@type="text/javascript"]'):
        text = HTML.StringFromElement(script)
        # Can also search for pdk_html5_url but I can't seem to play the resulting .m3u8 file.
        match = re.search(r'"original_air_date":.+?"pdk_flash_url":"([^"]+)"', text)
        if match:
            fix_slash = re.sub(r'\\/', r'/', match.group(1))
            fix_uni_amp = re.sub(r'\\u0026', r'&', fix_slash)
            fix_hex_amp = re.sub(r'\\x26', r'&', fix_uni_amp)
            
            xml = XML.ElementFromURL(fix_hex_amp, cacheTime=CACHE_1HOUR)
            
            rtmp_url_elements = xml.xpath('//smil:meta/@base', namespaces=NAMESPACES)
            if rtmp_url_elements:
                rtmp_url = rtmp_url_elements[0]
                
                switch_elements = xml.xpath('//smil:switch', namespaces=NAMESPACES)
                if switch_elements:
                    switch = switch_elements[0]
                    
                    for video in switch.xpath('./smil:video', namespaces=NAMESPACES):
                        srcs = video.xpath('./@src')
                        bitrates = video.xpath('./@system-bitrate')
                        heights = video.xpath('./@height')
                        widths = video.xpath('./@width')

                        if srcs and bitrates and heights and widths:
                            src = srcs[0]
                            bitrate = bitrates[0]
                            height = heights[0]
                            width = widths[0]
                            found_video = True

                            if int(video_resolution) >= int(height):
                                break

            # Once we have the first pdk_flash_url script match, don't look at any other matches.
            break
    
    if not found_video:
        # Most likely we are not allowed to watch this video because of cable provider or geographic restrictions.
        raise Ex.MediaNotAvailable
        
    return IndirectResponse(VideoClipObject, key=RTMPVideoURL(
        url = rtmp_url,
        clip = 'mp4:' + src,
        app = 'ondemand?' + src.split('?')[1]
    ))

